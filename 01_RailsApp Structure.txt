MVC Architecture
- creates separation between GUI and backend

Models
- resources in your app (users, blog posts, articles, etc.)
- often have databases attached to them

Views
- create GUI
- made of HTML, CSS, JavaScript
- Rails uses embedded ruby into the HTML template (page.html.erb) - look for <%= command %>

Controllers
- not seen by users
- brains behind your application
- determines how users requests are handled and routed in your application 
- a lot of times you have Controllers for specific resources

Repository Structure
- app
    - Controllers (controllers are housed here)
    - Models (Models are house here)
    - Views (for view templates)

Change Route of Localhost
- go into config/routes and define a root path (root "application#hello")
- then go to your app/app/controller/application_controller and create an action to render html 

To generate a view
- define a route that points to a controller#action (root "application#hello")
- have an appropriately named controller
    - if dealing w/ layouts/static pages, a name could be pages_controller
- once controller is defined, have an appropriately named action/method
    - a name could be home for a root route/home page
- under the views folder, rails will expect:
    - a pages folder (named for the pages controller) and 
    - a home.html.erb view template (named for the homes aciton existing in pages controller)
    - a pages_controller.rb file

use <rails generate controller CONTROLLER_NAME> to create a controller!

Structure of Rails app

app/assets 
- store static assets like images (used in layout of the app) and stylesheets
- application.css is the manifest file which makes all of the stylesheets files available to all of the views in the application
    - stylesheet_link_tag "application" refers to this application.css file
app/channel/application_cable    
- makes real time communications available

app/controller
- all controllers are housed
- application_controller.rb is the main file because it contains default functionality
- all other controllers will inherit functionality from application_controller 

app/helper
- contains helper functions and methods written for view templates 

app/JavaScript
- contains web packs adn makes js available for app wide use

app/Models
- where all models are stored
- all other models will inherit from application_record.rb 

app/views
- has layouts folder that contains application.html.erb
    - this file is where all of our views are served through
    - <%= yield %> is where all views are served through

config
- keep track of routes.rb 

db 
- where dev and test databases are housed. use sqlite automatically
- saves data from app in tables
- you can create migration files to create tables
- schema file will go here

Gemfile
- where all the used gems are listed
- Gemfile.lock is where all of the gem versions are saved 


